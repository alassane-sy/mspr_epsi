generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Role {
  id   Int    @id @default(autoincrement())
  nom  String @unique
  user User[]
}

model User {
  id_user      Int           @id @default(autoincrement())
  prenom       String
  nom          String
  email        String        @unique
  telephone    String?       @unique
  nomero_rue   String?
  nom_rue      String?
  noom         String?
  code_postale String?
  ville        String?
  mdp          String
  flag         Int           @default(1)
  role_user    String        @default("user_lambda")
  role         Role          @relation(fields: [role_user], references: [nom])
  avatar       String        @default("/images/avatar/user-default.png")
  otp_enabled  Boolean       @default(false)
  otp_verified Boolean       @default(false)
  otp_ascii    String?
  otp_hex      String?
  otp_base32   String?
  otp_auth_url String?
  botanistes   Botaniste[]
  user_lambda  User_lambda[]
  annonces     Annonce[]
  gardiennages Gardiennage[]
  Conseil      Conseil[]
}

model Botaniste {
  user    Int  @id
  id_user User @relation(fields: [user], references: [id_user])
}

model User_lambda {
  user    Int  @id
  id_user User @relation(fields: [user], references: [id_user])
}

model Annonce {
  id_annonce     Int            @id @default(autoincrement())
  localisation   String?
  description    String?
  type_gardien   Int            @default(0)
  nb_signalement Int            @default(0)
  latidute       Float
  longitude      Float
  id_user        Int
  date_annonce   DateTime       @default(now())
  accepte        Boolean        @default(false)
  user           User           @relation(fields: [id_user], references: [id_user])
  gardiennage    Gardiennage?
  photo          PhotoAnnonce[]
  conseil        Conseil[]
}

model Gardiennage {
  id_gardiennage    Int                @id @default(autoincrement())
  date_debut        DateTime
  date_fin          DateTime
  date_gardiennage  DateTime           @default(now())
  description       String?
  id_user           Int
  user              User               @relation(fields: [id_user], references: [id_user])
  idAnnonce         Int                @unique @default(0)
  annonce           Annonce            @relation(fields: [idAnnonce], references: [id_annonce], onDelete: SetDefault)
  photo_gardiennage PhotoGardiennage[]
}

model PhotoGardiennage {
  id_photo      Int         @id @default(autoincrement())
  lien          String
  date_photo    DateTime    @default(now())
  idGardiennage Int
  gardiennage   Gardiennage @relation(fields: [idGardiennage], references: [id_gardiennage], onDelete: Cascade, onUpdate: Cascade)
}

model PhotoAnnonce {
  id_photo   Int      @id @default(autoincrement())
  lien       String
  date_photo DateTime @default(now())
  idAnnonce  Int
  annonce    Annonce  @relation(fields: [idAnnonce], references: [id_annonce], onDelete: Cascade, onUpdate: Cascade)
}

model Conseil {
  id_consiel    Int      @id @default(autoincrement())
  date_conseil  DateTime @default(now())
  message       String
  idUser        Int
  nbSignalement Int      @default(0)
  user          User     @relation(fields: [idUser], references: [id_user])
  idAnnonce     Int
  annonce       Annonce  @relation(fields: [idAnnonce], references: [id_annonce], onDelete: Cascade, onUpdate: Cascade)
}
